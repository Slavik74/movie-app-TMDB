{"version":3,"sources":["components/ActorCard.js","model/ActorModel.js","components/MenuBar.js","pages/ActoresPage.js","components/MovieCard.js","model/MovieModel.js","pages/MoviePage.js","App.js","reportWebVitals.js","index.js"],"names":["ActorCard","tmdbId","firstName","lastName","age","image","getActorId","imdburl","className","href","onClick","e","preventDefault","target","src","ActorModel","birthday","imdbLink","this","ageDifMs","Date","now","parse","ageDate","Math","abs","getUTCFullYear","MenuBar","filterText","sortOrder","handleFilter","handleSortBy","handleSortOrder","Navbar","collapseOnSelect","expand","bg","Toggle","aria-controls","Collapse","id","Nav","InputGroup","Prepend","Text","FormControl","placeholder","aria-label","value","onChange","as","custom","defaultValue","style","cursor","icon","values","size","color","ActoresPage","useState","actors","setActors","useEffect","actorsJson","map","actor","name1","name2","birthdate","img","setFilterText","sortBy","setSortBy","setSortOrder","actorsFiltered","filter","toLowerCase","includes","doFilter","sort","a","b","Number","actorCards","index","Container","event","MovieCard","movie","Card","text","poster","Img","variant","Body","Title","name","release_year","ListGroup","Item","length","director","stars","join","plot","MovieModel","release_date","getFullYear","MoviePage","actorId","api_key","configData","tmdb_api_key","results","setResults","movies","setMovies","axios","result","data","fetchData","MoviesModel","title","poster_path","overview","Row","Col","lg","App","setActorId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","library","add","fab","faLongArrowAltUp","faLongArrowAltDown","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4+OA8BeA,MA3Bf,YAAoF,IAAhEC,EAA+D,EAA/DA,OAAQC,EAAuD,EAAvDA,UAAWC,EAA4C,EAA5CA,SAAUC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAgBC,GAAa,EAAtBC,QAAsB,EAAbD,YAOlE,OACI,qBAAKE,UAAU,sCAAf,SACI,sBAAKA,UAAU,OAAf,UACI,qBAAKA,UAAU,cAAf,SACI,6BAAI,mBAAGC,KAAK,IAAIC,QATZ,SAACC,GACjBA,EAAEC,iBACFN,EAAWL,IAOuCY,OAAO,QAAzC,SAAkDX,EAAa,IAAMC,QAE7E,qBAAKK,UAAU,UAAf,SACI,qBAAKA,UAAU,WAAWM,IAAKT,MAEnC,oBAAIG,UAAU,8BAAd,SACI,qBAAIA,UAAU,kBAAd,UAAgC,4CAAwBJ,a,gBCD7DW,E,WAjBX,WAAYd,EAAQC,EAAWC,EAAUa,EAAUX,EAAOY,GAAW,oBACjEC,KAAKjB,OAASA,EACdiB,KAAKhB,UAAYA,EACjBgB,KAAKf,SAAWA,EAChBe,KAAKF,SAAWA,EAChBE,KAAKb,MAAQA,EACba,KAAKD,SAAWA,E,uCAGpB,WACI,IAAIE,EAAWC,KAAKC,MAAQD,KAAKE,MAAMJ,KAAKF,UACxCO,EAAU,IAAIH,KAAKD,GACvB,OAAOK,KAAKC,IAAIF,EAAQG,iBAAmB,U,qDCTpC,SAASC,EAAT,GAAwF,IAAtEC,EAAqE,EAArEA,WAAYC,EAAyD,EAAzDA,UAAWC,EAA8C,EAA9CA,aAAcC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,gBAEhF,OACI,8BACI,eAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,UAAxC,UACI,cAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,0BAC7B,eAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,wBAApB,UAGI,cAACC,EAAA,EAAD,CAAKjC,UAAU,SAAf,SACI,eAACkC,EAAA,EAAD,WACI,cAACA,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,wBAEJ,cAACC,EAAA,EAAD,CAAaC,YAAY,eAAeC,aAAW,SAAQC,MAAOpB,EAAYqB,SAAUnB,SAKhG,cAACW,EAAA,EAAD,CAAKjC,UAAU,OAAf,SACI,eAACkC,EAAA,EAAD,WACI,cAACA,EAAA,EAAWC,QAAZ,UACI,cAACD,EAAA,EAAWE,KAAZ,sBAEJ,eAACC,EAAA,EAAD,CAAaK,GAAG,SAASC,QAAM,EAACF,SAAUlB,EAA1C,UACQ,wBAAQqB,aAAa,IAArB,oBACA,wBAAQJ,MAAM,IAAd,wBACA,wBAAQA,MAAM,IAAd,uBACA,wBAAQA,MAAM,IAAd,oBAER,sBAAKxC,UAAU,SAAf,UACI,cAAC,IAAD,CAAiB6C,MAAO,CAAEC,OAAQ,WAAaC,KAAK,sBAAsBC,OAAQ3B,EAAW4B,KAAK,KAAKC,MAAmB,QAAZ7B,EAAmB,UAAW,UACxInB,QAAS,kBAAIsB,EAAgB,UACjC,cAAC,IAAD,CAAiBqB,MAAO,CAAEC,OAAQ,WAAaC,KAAK,oBAAoBC,OAAQ3B,EAAW4B,KAAK,KAAKC,MAAmB,SAAZ7B,EAAoB,UAAW,UACvInB,QAAS,kBAAIsB,EAAgB,2B,YCqDlD2B,MAlFf,YAAoC,IAAdrD,EAAa,EAAbA,WAAa,EAEHsD,mBAAS,IAFN,mBAExBC,EAFwB,KAEhBC,EAFgB,KAK/BC,qBAAU,WACND,EAAUE,EAAWC,KAAI,SAAAC,GAAK,OAAI,IAAInD,EAAWmD,EAAMjE,OAAQiE,EAAMC,MAAOD,EAAME,MAAOF,EAAMG,UAAWH,EAAMI,IAAKJ,EAAMjD,gBAC5H,IAP4B,MAUK2C,mBAAS,IAVd,mBAUxBhC,EAVwB,KAUZ2C,EAVY,OAmBHX,mBAAS,IAnBN,mBAmBxBY,EAnBwB,KAmBhBC,EAnBgB,OAoBGb,mBAAS,OApBZ,mBAoBxB/B,EApBwB,KAoBb6C,EApBa,KAmCzBC,EAAiBd,EAAOe,OAJb,SAAAhD,GAAU,OAAI,SAAAsC,GAAK,OACnCtC,GAAcsC,EAAMhE,UAAU2E,cAAcC,SAASlD,EAAWiD,gBACjEX,EAAM/D,SAAS0E,cAAcC,SAASlD,EAAWiD,gBAEZE,CAASnD,IAEjC,MAAT4C,EACgB,QAAZ3C,EACA8C,EAAeK,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE/E,UAAYgF,EAAEhF,UAAa,GAAK,KAEjEyE,EAAeK,MAAK,SAACE,EAAGD,GAAJ,OAAWA,EAAE/E,UAAYgF,EAAEhF,UAAa,GAAK,KACrD,MAATsE,EACS,QAAZ3C,EACA8C,EAAeK,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9E,SAAW+E,EAAE/E,SAAY,GAAK,KAE/DwE,EAAeK,MAAK,SAACE,EAAGD,GAAJ,OAAWA,EAAE9E,SAAW+E,EAAE/E,SAAY,GAAK,KACnD,MAATqE,IACS,QAAZ3C,EACA8C,EAAeK,MAAK,SAACC,EAAGC,GAAJ,OAAWC,OAAOF,EAAE7E,OAAS+E,OAAOD,EAAE9E,UAE1DuE,EAAeK,MAAK,SAACE,EAAGD,GAAJ,OAAWE,OAAOF,EAAE7E,OAAS+E,OAAOD,EAAE9E,WAGlE,IAAMgF,EAAaT,EAAeV,KAAI,SAACC,EAAOmB,GAAR,OAAkB,cAAC,EAAD,CACJpF,OAAUiE,EAAMjE,OAChBC,UAAagE,EAAMhE,UACnBC,SAAY+D,EAAM/D,SAClBC,IAAO8D,EAAM9D,MACbC,MAAS6D,EAAM7D,MACfE,QAAW2D,EAAMjD,SACjBX,WAAcA,GAPM,MAAM+E,MAW9E,OACI,cAACC,EAAA,EAAD,CAAW9E,UAAU,UAArB,SACI,sBAAKA,UAAU,YAAf,UACI,iCACI,sBAAMA,UAAU,cAAhB,sBAGJ,cAAC,EAAD,CAASoB,WAAYA,EAAYC,UAAWA,EAAWC,aA5D9C,SAAAyD,GACjB,IAAM3D,EAAW2D,EAAM1E,OAAOmC,MAC9BuB,EAAc3C,IA0D6EG,aAlD5E,SAAAwD,GACfd,EAAUc,EAAM1E,OAAOmC,QAiD8FhB,gBA9CjG,SAACH,GACrB6C,EAAa7C,MA8CL,qBAAKrB,UAAU,MAAf,SACK4E,U,wFCnDNI,MA5Bf,YAA+B,IAAVC,EAAS,EAATA,MACjB,OACI,qBAAKjF,UAAU,UAAf,SACI,cAACkF,EAAA,EAAD,CAAMtD,GAAG,YAAYuD,KAAK,QAA1B,SACI,sBAAKnF,UAAU,kBAAf,UACCiF,EAAMG,OAAO,cAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMhF,IAAK2E,EAAMG,SAAW,KAC5D,eAACF,EAAA,EAAKK,KAAN,WACI,cAACL,EAAA,EAAKM,MAAN,oBAAgBP,EAAMQ,KAAtB,aAA+BR,EAAMS,eAArC,cAAyDT,EAAMjD,MAC/D,eAAC2D,EAAA,EAAD,CAAWL,QAAQ,QAAnB,UACI,eAACK,EAAA,EAAUC,KAAX,CAAgBN,QAAQ,YAAxB,UACQ,sBAAMtF,UAAU,aAAhB,qBAA4CiF,EAAMY,OAAO,cAEjE,eAACF,EAAA,EAAUC,KAAX,CAAgBN,QAAQ,YAAxB,UACI,sBAAMtF,UAAU,aAAhB,uBAA8CiF,EAAMa,YACxD,eAACH,EAAA,EAAUC,KAAX,CAAgBN,QAAQ,YAAxB,UACI,sBAAMtF,UAAU,aAAhB,yBAAgDiF,EAAMc,MAAMC,KAAK,SACrE,eAACL,EAAA,EAAUC,KAAX,CAAgBN,QAAQ,YAAxB,UACI,sBAAMtF,UAAU,aAAhB,uBACA,+BAAOiF,EAAMgB,wBCH1BC,E,WAlBX,WAAYlE,EAAImE,EAAcV,EAAMI,EAAQC,EAAUV,EAAQa,EAAMF,GAAQ,oBACxErF,KAAKsB,GAAKA,EACVtB,KAAK+E,KAAOA,EACZ/E,KAAKmF,OAASA,EACdnF,KAAKoF,SAAWA,EAChBpF,KAAK0E,OAAS,kCAAoCA,EAClD1E,KAAKuF,KAAOA,EACZvF,KAAKqF,MAAQA,EACbrF,KAAKyF,aAAeA,E,gDAGxB,WAEI,OADc,IAAIvF,KAAKF,KAAKyF,cACfC,kB,KCgCNC,MAvCf,YAAgC,IAAZC,EAAW,EAAXA,QAEVC,EAAUC,EAAWC,aAFA,EAIGrD,mBAAS,IAJZ,mBAIpBsD,EAJoB,KAIXC,EAJW,OAKCvD,mBAAS,IALV,mBAKpBwD,EALoB,KAKZC,EALY,KA2B3B,OAZAtD,oBAAS,sBAAC,sBAAAkB,EAAA,sFAAAA,EAAA,MACY,4BAAAA,EAAA,sEACOqC,IAAM,uDAAD,OAAwDP,EAAxD,uBAA8ED,EAA9E,+BADZ,OACRS,EADQ,OAEdJ,EAAWI,EAAOC,KAAKN,SAFT,2CADZ,qDAKJO,GALI,2CAMP,CAACX,IAEJ/C,qBAAU,WACNsD,EAAUH,EAAQjD,KAAI,SAAAwB,GAAK,OAAI,IAAIiC,EAAYjC,EAAMjD,GAAIiD,EAAMkB,aAAclB,EAAMkC,MAAO,IAAK,WAAWlC,EAAMmC,YAAcnC,EAAMoC,SAAU,CAAC,QAAS,QAAS,QAAS,gBAC3K,CAACX,IAGA,qBAAK1G,UAAU,WAAf,SACI,cAAC8E,EAAA,EAAD,UACI,cAACwC,EAAA,EAAD,UACKV,EAAOnD,KAAI,SAACwB,EAAOJ,GAAR,OAAkB,cAAC0C,EAAA,EAAD,CAAuBC,GAAI,GAA3B,SAA+B,cAAC,EAAD,CAAWvC,MAAOA,KAAvC,MAAMJ,aCpBnD4C,MAff,WAAgB,IAAD,EAEiBrE,mBAAS,MAF1B,mBAENkD,EAFM,KAEGoB,EAFH,KAIb,OACE,gCACE,cAAC,EAAD,CAAa5H,WAAY,SAACwG,GACxBoB,EAAWpB,MAGZA,EAAS,cAAC,EAAD,CAAWA,QAASA,IAAY,SCFjCqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gCCGdQ,IAAQC,IAAIC,IAAKC,IAAkBC,KAGnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BlB,M","file":"static/js/main.eab81201.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ActorCard.css'\r\n\r\nfunction ActorCard({tmdbId, firstName, lastName, age, image, imdburl, getActorId}) {\r\n\r\n    const handleClick = (e)=>{\r\n        e.preventDefault();\r\n        getActorId(tmdbId)\r\n    }\r\n\r\n    return (\r\n        <div className=\"col-lg-3 col-md-4 col-sm-6 card-box\">\r\n            <div className=\"card\"> \r\n                <div className=\"card-header\">\r\n                    <h5><a href='#' onClick={handleClick} target=\"_self\">{firstName  + ' ' + lastName}</a></h5>\r\n                </div>\r\n                <div className=\"img-box\">\r\n                    <img className=\"card-img\" src={image} />\r\n                </div>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    <li className=\"list-group-item\"><span>Age:&nbsp;</span>{age}</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default ActorCard;\r\n","\r\nclass ActorModel {\r\n    constructor(tmdbId, firstName, lastName, birthday, image ,imdbLink) {\r\n        this.tmdbId = tmdbId;\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n        this.birthday = birthday;\r\n        this.image = image;\r\n        this.imdbLink = imdbLink;\r\n    }\r\n\r\n    age() {\r\n        var ageDifMs = Date.now() - Date.parse(this.birthday);\r\n        var ageDate = new Date(ageDifMs);\r\n        return Math.abs(ageDate.getUTCFullYear() - 1970);\r\n    }\r\n\r\n}\r\n\r\nexport default ActorModel;","import React from 'react';\r\nimport { Navbar, Nav, InputGroup, FormControl } from \"react-bootstrap\";\r\nimport './MenuBar.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport default function MenuBar({filterText, sortOrder, handleFilter, handleSortBy, handleSortOrder}) {\r\n    \r\n    return (\r\n        <div>\r\n            <Navbar collapseOnSelect expand=\"md\" bg=\"primary\">\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    \r\n                    {/* Filter */}\r\n                    <Nav className=\"search\">\r\n                        <InputGroup>\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>Search:</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl placeholder=\"Search actor\" aria-label=\"Filter\"value={filterText} onChange={handleFilter}  />\r\n                        </InputGroup>\r\n                    </Nav>\r\n\r\n                    {/* Sort */}\r\n                    <Nav className=\"sort\">\r\n                        <InputGroup>\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>Sort:</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl as=\"select\" custom onChange={handleSortBy}>\r\n                                    <option defaultValue=\"1\">Select</option>\r\n                                    <option value=\"1\">First Name</option>\r\n                                    <option value=\"2\">Last Name</option>\r\n                                    <option value=\"3\">Age</option>\r\n                            </FormControl>\r\n                            <div className=\"arrows\">\r\n                                <FontAwesomeIcon style={{ cursor: \"pointer\" }} icon=\"long-arrow-alt-down\" values={sortOrder} size=\"lg\" color={sortOrder==='Asc'? '#d0cfca': '#0275df'}\r\n                                    onClick={()=>handleSortOrder('Asc')} />\r\n                                <FontAwesomeIcon style={{ cursor: \"pointer\" }} icon=\"long-arrow-alt-up\" values={sortOrder} size=\"lg\" color={sortOrder==='Desc'? '#d0cfca': '#0275df'}\r\n                                    onClick={()=>handleSortOrder('Desc')}/>\r\n                            </div>\r\n                        </InputGroup>\r\n                    </Nav>\r\n\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            \r\n            \r\n            \r\n\r\n        </div>\r\n    );\r\n};\r\n","//import axios from 'axios'\r\nimport React, { useState, useEffect } from 'react';\r\nimport {Container } from \"react-bootstrap\";\r\nimport './ActoresPage.css';\r\n\r\nimport ActorCard from '../components/ActorCard';\r\nimport ActorModel from '../model/ActorModel';\r\nimport MenuBar from '../components/MenuBar';\r\nimport actorsJson from '../actors.json';\r\n\r\nfunction ActoresPage({getActorId}) {\r\n\r\n    const [actors, setActors] = useState([]);\r\n\r\n    // We want to fetch the data from JSON only once the compoenent is mounting\r\n    useEffect(() => {\r\n        setActors(actorsJson.map(actor => new ActorModel(actor.tmdbId, actor.name1, actor.name2, actor.birthdate, actor.img, actor.imdbLink)));\r\n    }, []);\r\n\r\n    //Filter  \r\n    const [filterText, setFilterText] = useState(\"\");\r\n\r\n    const handleFilter = event => {\r\n        const filterText=event.target.value; \r\n        setFilterText(filterText); \r\n    }   \r\n\r\n\r\n    //Sort\r\n    const [sortBy, setSortBy] = useState(\"\");\r\n    const [sortOrder, setSortOrder] = useState(\"Asc\");    \r\n\r\n    const handleSort = event => {\r\n        setSortBy(event.target.value);                \r\n    };\r\n\r\n    const handleSortOrder = (sortOrder) => {\r\n        setSortOrder(sortOrder);                \r\n    };\r\n\r\n\r\n    const doFilter = filterText => actor =>\r\n    !filterText || actor.firstName.toLowerCase().includes(filterText.toLowerCase()) ||\r\n    actor.lastName.toLowerCase().includes(filterText.toLowerCase()) ;\r\n\r\n    const actorsFiltered = actors.filter(doFilter(filterText));\r\n\r\n    if (sortBy===\"1\"){            \r\n        if (sortOrder===\"Asc\")\r\n            actorsFiltered.sort((a, b) => (a.firstName > b.firstName) ? 1 : -1);\r\n        else\r\n            actorsFiltered.sort((b, a) => (a.firstName > b.firstName) ? 1 : -1);\r\n    } else if (sortBy===\"2\"){\r\n        if (sortOrder===\"Asc\")\r\n            actorsFiltered.sort((a, b) => (a.lastName > b.lastName) ? 1 : -1);\r\n        else\r\n            actorsFiltered.sort((b, a) => (a.lastName > b.lastName) ? 1 : -1);\r\n    } else if (sortBy===\"3\"){\r\n        if (sortOrder===\"Asc\")\r\n            actorsFiltered.sort((a, b) => (Number(a.age()) - Number(b.age())));\r\n        else\r\n            actorsFiltered.sort((b, a) => (Number(a.age()) - Number(b.age())));\r\n    }\r\n\r\n    const actorCards = actorsFiltered.map((actor, index) => <ActorCard key={'act'+index }\r\n                                                        tmdbId = {actor.tmdbId}\r\n                                                        firstName = {actor.firstName} \r\n                                                        lastName = {actor.lastName}\r\n                                                        age = {actor.age()}   \r\n                                                        image = {actor.image} \r\n                                                        imdburl = {actor.imdbLink}\r\n                                                        getActorId = {getActorId} />)\r\n\r\n    //////////////\r\n\r\n    return (\r\n        <Container className=\"p-actor\">\r\n            <div className=\"container\">\r\n                <header>\r\n                    <span className=\"header-text\">Actors</span>               \r\n                </header>\r\n\r\n                <MenuBar filterText={filterText} sortOrder={sortOrder} handleFilter={handleFilter} handleSortBy={handleSort} handleSortOrder={handleSortOrder} />\r\n                <div className=\"row\">\r\n                    {actorCards}\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    );\r\n\r\n}\r\n\r\nexport default ActoresPage;","import React from 'react';\nimport { Card, ListGroup } from 'react-bootstrap';\nimport { Row } from 'react-bootstrap';\nimport './MovieCard.css'\n\nfunction MovieCard({ movie }) {\n    return (\n        <div className=\"c-movie\">\n            <Card bg=\"secondary\" text='white'>\n                <div className=\"card-horizontal\">\n                {movie.poster?<Card.Img variant=\"top\" src={movie.poster} />:null}\n                <Card.Body>\n                    <Card.Title>{`${movie.name} (${movie.release_year()})  ${movie.id}`}</Card.Title>\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item variant=\"secondary\">\n                                <span className=\"card-label\">Length:</span>{movie.length+\" minutes\"}\n                        </ListGroup.Item>\n                        <ListGroup.Item variant=\"secondary\">\n                            <span className=\"card-label\">Director:</span>{movie.director}</ListGroup.Item>\n                        <ListGroup.Item variant=\"secondary\">\n                            <span className=\"card-label\">Main stars:</span>{movie.stars.join(\", \")}</ListGroup.Item>\n                        <ListGroup.Item variant=\"secondary\">\n                            <span className=\"card-label\">Overview:</span>\n                            <span>{movie.plot}</span>\n                        </ListGroup.Item>\n                    </ListGroup>\n                </Card.Body>\n                </div>\n            </Card>\n        </div>\n    );\n}\n\nexport default MovieCard;","\r\nclass MovieModel {\r\n    constructor(id, release_date, name, length, director, poster ,plot, stars) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.length = length;\r\n        this.director = director;\r\n        this.poster = \"https://image.tmdb.org/t/p/w500\" + poster;\r\n        this.plot = plot;\r\n        this.stars = stars;        \r\n        this.release_date = release_date;\r\n    }\r\n\r\n    release_year(){\r\n        const rdate = new Date(this.release_date)\r\n        return rdate.getFullYear();\r\n    }\r\n    \r\n}\r\n\r\nexport default MovieModel;","\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport configData from \"../../package.json\";//to hide TMDB API keys\r\nimport MovieCard from '../components/MovieCard.js';\r\nimport MoviesModel from '../model/MovieModel.js';\r\n\r\nfunction MoviePage({actorId} ) {\r\n\r\n    const api_key = configData.tmdb_api_key //get TMDB API key from config file\r\n\r\n    const [results, setResults] = useState([]);\r\n    const [movies, setMovies] = useState([])\r\n\r\n    //`movie id https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&&with_cast=${actorId}&sort_by=vote_average.desc`\r\n    // runtime `https://api.themoviedb.org/3/movie/277129?api_key=53d2ee2137cf3228aefae083c8158855&language=en-US`\r\n    // stars `https://api.themoviedb.org/3/movie/684426/credits?api_key=53d2ee2137cf3228aefae083c8158855&language=en-US`\r\n    // videos `https://api.themoviedb.org/3/movie/157336/videos?api_key=53d2ee2137cf3228aefae083c8158855`\r\n    \r\n\r\n    \r\n    //get movies from TMDB api\r\n    useEffect(async () => {\r\n        const fetchData = async () => {\r\n            const result = await axios(`https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&&with_cast=${actorId}&sort_by=vote_average.desc`);\r\n            setResults(result.data.results);\r\n          };       \r\n          fetchData();\r\n    }, [actorId])\r\n\r\n    useEffect(() => {\r\n        setMovies(results.map(movie => new MoviesModel(movie.id, movie.release_date, movie.title, 125, \"director\",movie.poster_path , movie.overview, [\"Star1\", \"Star2\", \"Star3\", \"Star4\"])))    \r\n    }, [results])\r\n\r\n    return (        \r\n        <div className=\"p-movies\">\r\n            <Container>\r\n                <Row>\r\n                    {movies.map((movie, index) => <Col key={\"col\"+index} lg={12}><MovieCard movie={movie}/></Col>)}\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default MoviePage;","import ActoresPage from './pages/ActoresPage';\r\nimport React, { useState } from 'react';\r\nimport MoviePage from './pages/MoviePage';\r\n\r\nfunction App() {\r\n\r\n  const [actorId, setActorId] = useState(null);\r\n\r\n  return (\r\n    <div>\r\n      <ActoresPage getActorId={(actorId)=>{\r\n        setActorId(actorId)\r\n      }} />   \r\n      \r\n      {actorId? <MoviePage actorId={actorId} />:null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faLongArrowAltUp, faLongArrowAltDown } from '@fortawesome/free-solid-svg-icons'\nlibrary.add(fab, faLongArrowAltUp, faLongArrowAltDown)\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}